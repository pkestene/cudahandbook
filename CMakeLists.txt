cmake_minimum_required(VERSION 3.10)
project(cudahandbook LANGUAGES CXX C)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS OFF)

# custom cmake macros location
list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_SOURCE_DIR}/cmake/cuda")

# Prevent from build in source tree
include(preventBuildInSource)

# Init build type: Release, Debug, ...
include(initBuildType)

# useful for debugging cmake
include(print_target_properties)

# a simple macro to build executable avoiding copy paste
include(build_macro)

# always export compile commands database
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)  

#####################################################################
enable_language(CUDA)

find_package(CUDA REQUIRED)
#find_package(CUDAlibs REQUIRED COMPONENTS CUFFTW CUFFT )

if(NOT DEFINED CMAKE_CUDA_STANDARD)
  set(CMAKE_CUDA_STANDARD 11)
  set(CMAKE_CUDA_STANDARD_REQUIRED ON)
endif()

# we also need extra stuff to make sure compile flags are correctly
# passed to nvcc / host compiler
include(protect_nvcc_flags)
include(protect_pthread_flag)

# other third party libraries
find_package(NUMA)
find_package(OpenGL)
find_package(GLUT)

#####################################################################
##########################################################
##########################################################
##########################################################

# build some executable
add_subdirectory(SMs)
add_subdirectory(reduction)
add_subdirectory(concurrency)
add_subdirectory(memory)
add_subdirectory(scan)
add_subdirectory(corr)
add_subdirectory(driverAPI)
add_subdirectory(histogram)
add_subdirectory(microbench)
add_subdirectory(streaming)
add_subdirectory(texturing)

# Testing
#enable_testing()

#-------------------------------------------------------------------#
# Configuration summary
#-------------------------------------------------------------------#
message("//===================================================")
message("  ${PROJECT_NAME} build configuration:")
message("//===================================================")
message("  C++ Compiler : ${CMAKE_CXX_COMPILER_ID} " 
  "${CMAKE_CXX_COMPILER_VERSION} " 
  "${CMAKE_CXX_COMPILER_WRAPPER}")
message("    ${CMAKE_CXX_COMPILER}")
message("  CUDA Compiler      : ${CMAKE_CUDA_COMPILER}")
message("  CUDA Compiler exec : ${CUDA_NVCC_EXECUTABLE}")
message("  CUDA Compile flags : ${CMAKE_CUDA_FLAGS}")
message("")
message(" Thrid party libraries")
message("  NUMA   found : ${NUMA_FOUND}")
message("  OpenGL found : ${OPENGL_FOUND}")
